=begin
SUPERSEDE ReleasePlanner API to UI

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end
class Wp3ApiController < ApplicationController
  
  def receive_wp3_features

    already_in = params[:features].map { |f| @project.features.find_by(code: f[:id]).code if @project.features.find_by(code: f[:id])}.compact
    if !already_in.empty?
      error = Error.new(code:400,
                message: "Already exists features with id = #{already_in.join(', ')}", 
                fields: "feature.code")
      render json: error, status: 400 and return
    end
    params[:features].each do |f|
      @project.features.create(feature_params(f))
    end
    test = Array.new
    params[:features].each do |f|
      feature = @project.features.find_by(code: f[:code])
      test.push(feature)
        f[:hard_dependencies].each do |d|
          f2 = @project.features.find_by(code: d)
          if f2 and not feature.depends_on.exists?(code: d) \
                     and feature.code != d
            feature.depends_on << f2
          end
        end
    end
    render json: { "message" => "Successfully received features with id = #{test.map {|f| f.code}.join(', ')}"}

  end
  
  
  private
    # Use callbacks to share common setup or constraints between actions.
    def feature_params(jf)
      # The 'id' from WP3 becomes 'code'
      jf[:code] = jf.delete :id
      
      # Only three properties are taken into accound: 'description' & 'deadline' & 'jira_url'
      jf[:properties].each do |p|
        jf[:description] = p[:value] if p[:key] == 'description'
        jf[:deadline] = p[:value] if p[:key] == 'deadline'
        jf[:jira_url] = p[:value] if p[:key] == 'jira_url'
      end
      
      jf.permit(:code, :name, :effort, :priority, :description, :deadline, :jira_url)
    end
end
